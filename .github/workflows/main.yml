name: EncChat CI/CD Pipeline

on:
  push:
    branches: [ main, Patryk, Kacper, Pawel ]
  pull_request:
    branches: [ main ]

jobs:
  project-setup:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Debug directory structure
      run: |
        echo "Current directory: $(pwd)"
        echo "Contents of current directory:"
        ls -la
        echo ""
        echo "Searching for package.json files:"
        find . -name "package.json" | sort
        echo ""
        echo "Searching for directories with 'backend' in the name:"
        find . -type d -name "*backend*" | sort
        echo ""
        echo "Repository structure:"
        find . -type d -not -path "*/node_modules/*" -not -path "*/.git/*" | sort

  lint-and-test:
    needs: project-setup
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install root dependencies
      run: |
        if [ -f "package.json" ]; then
          npm ci
        else
          echo "No package.json found in the root directory"
        fi
    
    - name: Install backend dependencies
      run: |
        if [ -d "backend" ]; then
          cd backend
          if [ -f "package.json" ]; then
            npm ci
          else
            echo "No package.json found in the backend directory"
          fi
        elif [ -d "EncChat/backend" ]; then
          cd EncChat/backend
          if [ -f "package.json" ]; then
            npm ci
          else
            echo "No package.json found in the EncChat/backend directory"
          fi
        else
          echo "Could not find the backend directory"
        fi
    
    - name: Install frontend dependencies
      run: |
        if [ -d "src" ]; then
          cd src
          if [ -f "package.json" ]; then
            npm ci
          else
            echo "No package.json found in the src directory"
          fi
        elif [ -d "EncChat/src" ]; then
          cd EncChat/src
          if [ -f "package.json" ]; then
            npm ci
          else
            echo "No package.json found in the EncChat/src directory"
          fi
        else
          echo "Could not find the src directory"
        fi
    
    - name: Run linting and tests
      run: |
        if [ -f "package.json" ]; then
          npm run lint || echo "Linting skipped"
          npm test || echo "Testing skipped"
        else
          echo "No package.json found for running tests"
        fi

  build:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies and build
      run: |
        # Try to find and build from the root package.json
        if [ -f "package.json" ]; then
          npm ci
          npm run build || echo "No build script in root package.json"
        else
          echo "No package.json found in the root directory"
        fi
        
        # Try to build from the src directory if it exists
        if [ -d "src" ] && [ -f "src/package.json" ]; then
          cd src
          npm ci
          npm run build || echo "No build script in src/package.json"
        elif [ -d "EncChat/src" ] && [ -f "EncChat/src/package.json" ]; then
          cd EncChat/src
          npm ci
          npm run build || echo "No build script in EncChat/src/package.json"
        else
          echo "Could not find a suitable src directory with package.json"
        fi
    
    - name: Find and upload build artifacts
      run: |
        # Look for common build output directories
        BUILD_DIR=""
        for dir in "./build" "./dist" "./src/build" "./src/dist" "./EncChat/build" "./EncChat/dist" "./EncChat/src/build" "./EncChat/src/dist"; do
          if [ -d "$dir" ]; then
            BUILD_DIR="$dir"
            break
          fi
        done
        
        if [ -n "$BUILD_DIR" ]; then
          echo "Found build directory at $BUILD_DIR"
          mkdir -p artifacts
          cp -r "$BUILD_DIR"/* artifacts/
        else
          echo "Could not find build directory, creating empty artifacts directory"
          mkdir -p artifacts
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: artifacts/

  deploy-development:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/Patryk' || github.ref == 'refs/heads/Kacper' || github.ref == 'refs/heads/Pawel'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: artifacts/
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Deploy to development
      run: |
        echo "Deploying to development environment..."
        echo "Working directory: $(pwd)"
        echo "Contents of artifacts directory:"
        ls -la artifacts/
        
        echo "Using environment variables for configuration"
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
        CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
        CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
        EMAILJS_PRIVATE_KEY: ${{ secrets.EMAILJS_PRIVATE_KEY }}
        EMAILJS_PUBLIC_KEY: ${{ secrets.EMAILJS_PUBLIC_KEY }}
        EMAILJS_RESET_PASSWORD_TEMPLATE: ${{ secrets.EMAILJS_RESET_PASSWORD_TEMPLATE }}
        EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
        EMAILJS_VERIFY_EMAIL_TEMPLATE: ${{ secrets.EMAILJS_VERIFY_EMAIL_TEMPLATE }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: artifacts/
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "Working directory: $(pwd)"
        echo "Contents of artifacts directory:"
        ls -la artifacts/
        
        echo "Using environment variables for configuration"
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
        CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
        CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
        EMAILJS_PRIVATE_KEY: ${{ secrets.EMAILJS_PRIVATE_KEY }}
        EMAILJS_PUBLIC_KEY: ${{ secrets.EMAILJS_PUBLIC_KEY }}
        EMAILJS_RESET_PASSWORD_TEMPLATE: ${{ secrets.EMAILJS_RESET_PASSWORD_TEMPLATE }}
        EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
        EMAILJS_VERIFY_EMAIL_TEMPLATE: ${{ secrets.EMAILJS_VERIFY_EMAIL_TEMPLATE }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
