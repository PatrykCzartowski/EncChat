generator client {
    provider = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                  Int             @id @default(autoincrement())
    username            String
    password            String
    dateOfBirth         DateTime        @default(now()) @db.Date
    email               String          @unique
    createdAt           DateTime        @default(now())
    updatedAt           DateTime        @updatedAt
    banned              Boolean         @default(false)
    emailVerified       Boolean         @default(false)
    publicKey           String?

    profile                     Profile?
    sessions                    Session[]
    friends                     Friend[]            @relation("AccountFriends")
    friendOf                    Friend[]            @relation("FriendAccounts")
    Messages                    Message[]
    Chats                       Chat[]
    sentFriendRequests          FriendRequest[]     @relation("SenderRelation")
    receivedFriendRequests      FriendRequest[]     @relation("ReceiverRelation")
    blockedUser                 BlockedUser[]       @relation("AccountBlockedUsers")
    blockedAccounts             BlockedUser[]       @relation("BlockedAccountUsers")
    notification                Notification[]
    userSettings                UserSettings[]
    ChatSettings                ChatSettings[]
    AccountChat                 AccountToChat[]
    WebSocketSession            WebSocketSession[]
    backups                     Backup[]
}

model Profile {
    id              Int         @id @default(autoincrement())
    firstName       String
    lastName        String
    bio             String?
    avatar          String?
    accountId       Int         @unique
    
    account         Account     @relation(fields: [accountId], references: [id])
}

model Session {
    id              Int         @id @default(autoincrement())
    token           String      @unique
    accountId       Int
    createdAt       DateTime    @default(now())
    expiresAt       DateTime
    active          Boolean     @default(true)
    
    account         Account     @relation(fields: [accountId], references: [id])
}

model Friend {
    id              Int         @id @default(autoincrement())
    accountId       Int
    friendId        Int
    createdAt       DateTime    @default(now())    

    account         Account     @relation("AccountFriends", fields: [accountId], references: [id])
    friend          Account     @relation("FriendAccounts", fields: [friendId], references: [id])
}

model Chat {
    id              Int         @id @default(autoincrement())
    name            String
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt @default(now())
    group           Boolean     @default(false)

    members         Account[]
    messages        Message[]
    ChatSettings    ChatSettings[]
    AccountChat     AccountToChat[]
}

model Message {
    id              Int         @id @default(autoincrement())
    content         String
    authorId        Int
    chatId          Int
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt @default(now())

    author          Account     @relation(fields: [authorId], references: [id])
    chat            Chat        @relation(fields: [chatId], references: [id])
}

model FriendRequest {
    id              Int         @id @default(autoincrement())
    senderId        Int
    receiverId      Int
    createdAt       DateTime    @default(now())
    status          String      @default("SEND")
    hidden          Boolean     @default(false)

    sender          Account     @relation("SenderRelation", fields: [senderId], references: [id])
    receiver        Account     @relation("ReceiverRelation", fields: [receiverId], references: [id])
}

model BlockedUser {
    id                  Int         @id @default(autoincrement())
    accountId           Int
    blockedAccountId    Int
    createdAt           DateTime    @default(now())

    account             Account     @relation("AccountBlockedUsers", fields: [accountId], references: [id])
    blockedAccount      Account     @relation("BlockedAccountUsers", fields: [blockedAccountId], references: [id])     
}

model Notification {
    id              Int         @id @default(autoincrement())
    accountId       Int
    content         String
    read            Boolean     @default(false)
    createdAt       DateTime    @default(now())

    account     Account     @relation(fields: [accountId], references: [id])
}

model UserSettings {
    id                  Int         @id @default(autoincrement())
    accountId           Int
    theme               String
    language            String
    notifications       Boolean     @default(true)
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt @default(now())

    account             Account     @relation(fields: [accountId], references: [id])
}

model ChatSettings {
    id                      Int         @id @default(autoincrement())
    chatId                  Int
    accountId               Int
    notifications           Boolean     @default(true)
    disappearingMessages    Boolean     @default(false)
    chatPin                 String?
    multimediaPreview       Boolean     @default(true)
    messageSearch           Boolean     @default(true)
    createdAt               DateTime    @default(now())
    updatedAt               DateTime    @updatedAt @default(now())

    chat          Chat        @relation(fields: [chatId], references: [id])
    account       Account     @relation(fields: [accountId], references: [id])
}

model AccountToChat {
    accountId       Int
    chatId          Int

    @@id([accountId, chatId])

    account   Account   @relation(fields: [accountId], references: [id])
    chat      Chat      @relation(fields: [chatId], references: [id])
}

model WebSocketSession {
    sessionId       String      @id
    accountId       Int
    createdAt       DateTime    @default(now())

    account     Account     @relation(fields: [accountId], references: [id])
}

model Backup {
    id                  Int         @id @default(autoincrement())
    accountId           Int
    backupName          String
    encryptedData       String
    timestamp           DateTime    @default(now())

    account Account @relation(fields: [accountId], references: [id])
}