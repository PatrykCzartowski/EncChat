name: EncChat CI/CD Pipeline

on:
  push:
    branches: [ main, Patryk, Kacper, Pawel ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Debug directory structure
      run: |
        pwd
        ls -la
        find . -name "package.json"
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Install frontend dependencies
      working-directory: ./src  # Adjust this if your frontend package.json is elsewhere
      run: npm ci || echo "No package.json in src directory"
    
    - name: Lint code (backend)
      working-directory: ./backend
      run: npm run lint || echo "Linting step skipped - add linting to your project"
    
    - name: Run backend tests
      working-directory: ./backend
      run: npm test || echo "Backend testing step skipped - add tests to your backend"

  build:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Install frontend dependencies
      working-directory: ./src  # Adjust this if your frontend package.json is elsewhere
      run: npm ci || echo "No package.json in src directory"
    
    - name: Build frontend
      working-directory: ./src  # Adjust this path based on where your build script is located
      run: npm run build || echo "No build script found"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: ./src/build  # Adjust this path based on where your build output goes

  deploy-development:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/Patryk' || github.ref == 'refs/heads/Kacper' || github.ref == 'refs/heads/Pawel'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: ./src/build  # Adjust this path based on your project structure
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci --production
    
    - name: Run database migrations
      working-directory: ./backend
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Configure Cloudinary
      env:
        CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
        CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
        CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      run: |
        echo "Setting up Cloudinary configuration..."
    
    - name: Configure Email Service
      env:
        EMAILJS_PRIVATE_KEY: ${{ secrets.EMAILJS_PRIVATE_KEY }}
        EMAILJS_PUBLIC_KEY: ${{ secrets.EMAILJS_PUBLIC_KEY }}
        EMAILJS_RESET_PASSWORD_TEMPLATE: ${{ secrets.EMAILJS_RESET_PASSWORD_TEMPLATE }}
        EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
        EMAILJS_VERIFY_EMAIL_TEMPLATE: ${{ secrets.EMAILJS_VERIFY_EMAIL_TEMPLATE }}
      run: |
        echo "Setting up EmailJS configuration..."
    
    - name: Deploy to development
      run: |
        echo "Deploying to development environment..."
        # Add your deployment script here, for example:
        # npm run deploy:dev
      env:
        JWT_SECRET: ${{ secrets.JWT_SECRET }}

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: ./src/build  # Adjust this path as needed
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci --production
    
    - name: Run database migrations
      working-directory: ./backend
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Configure Cloudinary
      env:
        CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
        CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
        CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      run: |
        echo "Setting up Cloudinary configuration..."
    
    - name: Configure Email Service
      env:
        EMAILJS_PRIVATE_KEY: ${{ secrets.EMAILJS_PRIVATE_KEY }}
        EMAILJS_PUBLIC_KEY: ${{ secrets.EMAILJS_PUBLIC_KEY }}
        EMAILJS_RESET_PASSWORD_TEMPLATE: ${{ secrets.EMAILJS_RESET_PASSWORD_TEMPLATE }}
        EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
        EMAILJS_VERIFY_EMAIL_TEMPLATE: ${{ secrets.EMAILJS_VERIFY_EMAIL_TEMPLATE }}
      run: |
        echo "Setting up EmailJS configuration..."
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment script here, for example:
        # npm run deploy:production
      env:
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
